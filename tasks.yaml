# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

includes:
  - remote: https://raw.githubusercontent.com/defenseunicorns/uds-common/v1.16.2/tasks/lint.yaml
  - common-setup: https://raw.githubusercontent.com/defenseunicorns/uds-common/v1.16.2/tasks/setup.yaml

variables:
  - name: VERSION
    description: "The image tag"
    # x-release-please-start-version
    default: "0.15.0"
    # x-release-please-end

  - name: IMAGE_NAME
    description: "The repository + name for the published image"
    default: "ghcr.io/defenseunicorns/uds/identity-config"

  - name: CORE_VERSION
    description: UDS Core Version for Releases and Clone
    # renovate: datasource=github-tags depName=defenseunicorns/uds-core versioning=semver
    default: "v0.45.0"

tasks:
  - name: build-and-publish
    description: "Build and publish the multi-arch image"
    actions:
      - cmd: docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag ${IMAGE_NAME}:${VERSION} src

  - name: build-zarf-pkg
    description: "Build the custom docker image and the zarf package for transporting it"
    actions:
      - cmd: docker build --tag ${IMAGE_NAME}:${VERSION} src
      - cmd: ./uds zarf package create . --set IDENTITY_CONFIG_IMG=${IMAGE_NAME}:${VERSION} --confirm

  - name: dev-build
    description: "Build the image locally for dev"
    actions:
      - cmd: docker build src -t uds-core-config:keycloak

  - name: dev-update-image
    description: "Build the image and import locally into k3d"
    actions:
      - task: dev-build
      - cmd: |
          k3d image import -c uds uds-core-config:keycloak
          kubectl patch statefulset keycloak -n keycloak --type='merge' -p '{"metadata":{"labels":{"zarf.dev/agent":"ignore"}}}'
          kubectl patch statefulset keycloak -n keycloak --type='merge' -p '{"spec":{"template":{"metadata":{"labels":{"zarf.dev/agent":"ignore"}}}}}'
          kubectl rollout restart statefulset -n keycloak keycloak

  - name: dev-theme
    description: "Copy theme to Keycloak in dev cluster"
    actions:
      - cmd: |
          PV=$(kubectl get pvc keycloak-themes -n keycloak -o jsonpath='{.spec.volumeName}')
          THEME_PATH=$(kubectl get pv $PV -o jsonpath="{.spec.hostPath.path}")
          docker cp src/theme k3d-uds-server-0:/$THEME_PATH

  - name: dev-plugin
    description: "Build and test Keycloak plugin source and create maven-surefire report"
    actions:
      - cmd: |
          cd src/plugin
          mvn clean verify | egrep ".*"

  - name: dev-cacert
    description: "Get the CA cert value for the Istio Gateway from your local build"
    actions:
      # This is written to a file rather than printed because it is a massive value to copy out of the terminal
      - cmd: |
          cat <<EOF > tls_cacert.yaml
          tls:
            cacert: "$(docker run --rm --entrypoint sh uds-core-config:keycloak -c 'cat /home/nonroot/authorized_certs.pem | base64 -w 0')"
          EOF
          echo "CA Cert values are in tls_cacert.yaml, this can be provided to your Istio gateway(s) for Keycloak OPTIONAL_MUTUAL"

  - name: debug-istio-traffic
    description: "Debug Istio traffic on keycloak"
    actions:
      - cmd: istioctl proxy-config log keycloak-0.keycloak --level debug
      - cmd: kubectl -n keycloak logs keycloak-0 -c istio-proxy -f

  - name: regenerate-test-pki
    description: "Generate a PKI cert for testing"
    actions:
      - cmd: |
          openssl genrsa -out test.pem 2048
          openssl genrsa -out ca.pem 2048
          openssl req -x509 -new -nodes -key ca.pem -sha256 -days 1825 -out ca.cer -subj "/C=US/O=U.S. Government/OU=DoD/OU=PKI/CN=DOD ID CA-59 FAKE TEST"
          openssl req -new -key test.pem -out test.csr -config src/csr.conf -batch
          openssl x509 -req -in test.csr -CA ca.cer -CAkey ca.pem -CAcreateserial -out test.cer -days 365 -extensions v3_ext -extfile src/csr.conf
          openssl pkcs12 -export -out test.pfx -inkey test.pem -in test.cer -certfile ca.cer -passout pass:
          zip src/authorized_certs ca.cer

  - name: uds-core-gateway-cacert
    description: "Copy cacert values into istio gateways"
    actions:
      - cmd: |
          yq eval-all --inplace 'select(fileIndex == 0) * select(fileIndex == 1)' uds-core/src/istio/values/config-tenant.yaml src/test/cypress/certs/tls_cacert.yaml
          yq eval-all --inplace 'select(fileIndex == 0) * select(fileIndex == 1)' uds-core/src/istio/values/config-admin.yaml src/test/cypress/certs/tls_cacert.yaml

  - name: uds-core-smoke-test
    description: "UDS Core + Identity Config smoke test with base realm.json"
    actions:
      - task: dev-build
      - task: clone-core
      - task: build-deploy-custom-slim

  - name: uds-core-integration-tests
    description: "UDS Core + Identity Config Integration Testing"
    actions:
      - description: Build identity config image
        cmd: docker build --build-arg CA_ZIP_URL="test/cypress/certs/authorized_certs.zip" -t uds-core-config:keycloak --no-cache src
      - task: clone-core
      - task: uds-core-gateway-cacert
      - task: build-deploy-custom-slim
      - task: cypress-tests
      - task: theme-customization-tests

  - name: grafana-group-auth-build-deploy
    description: Configure existing uds-core/grafana package for group authz, build, deploy grafana
    actions:
      - cmd: |
          sed -i '/^\s*sso:/,/^\s*-\s*name:/ {
            /groups:/d
            /^\s*-\s*name:/a \ \ \ \ \ \ groups:\n\ \ \ \ \ \ \ \ anyOf:\n\ \ \ \ \ \ \ \ \ - \/UDS Core\/Admin
          }' uds-core/src/grafana/chart/templates/uds-package.yaml

      - cmd: |
          cd uds-core
          uds run create:single-layer-callable --set LAYER=monitoring

  - name: clone-core
    description: "Clone UDS Core for integration testing"
    actions:
      - cmd: rm -rf uds-core
      - cmd: git clone --branch main https://github.com/defenseunicorns/uds-core.git

  - name: build-deploy-custom-slim
    description: "Build/Deploy custom slim dev bundle for integration testing"
    actions:
      - cmd: uds zarf package create . --confirm --set=IDENTITY_CONFIG_IMG=uds-core-config:keycloak --no-progress
      - cmd: cd uds-core && mkdir -p build && uds run create:single-layer && uds run create:single-layer-callable --set LAYER=identity-authorization
      - task: grafana-group-auth-build-deploy
      - cmd: uds create bundles/k3d-core-slim-dev --confirm --no-progress
      - cmd: uds deploy bundles/k3d-core-slim-dev/uds-bundle-k3d-core-slim-dev-*.tar.zst --set=core-identity-authorization.KEYCLOAK_CONFIG_IMAGE=uds-core-config:keycloak --confirm --no-progress
      - task: create-users

  - name: create-users
    description: "Creating users needed by the tests"
    actions:
      # Calling this explicitly even though it's also called by setup:keycloak-user. During the testing we often need it.
      - task: common-setup:keycloak-admin-user
      - description: "Create the Auditor User (testing_user) in the UDS Core realm"
        task: common-setup:keycloak-user
        with:
          group: "/UDS Core/Auditor"
          username: "testing_user"
          password: "Testingpassword1!!"
      - description: "Create the Admin User (testing_admin) in the UDS Core realm"
        task: common-setup:keycloak-user
        with:
          group: "/UDS Core/Admin"
          username: "testing_admin"
          password: "Testingpassword1!!"

  - name: cypress-tests
    description: "Run all cypress tests ( requires an existing deployed UDS Core Identity )"
    actions:
      - cmd: |
          npm --prefix src/test/cypress install
          npm --prefix src/test/cypress run cy.run

  - name: theme-customization-tests
    description: "Runs theme customization tests ( requires an existing deployed UDS Core Identity )"
    actions:
      - description: "Create theme customization resources"
        cmd: uds zarf tools kubectl apply -f tasks/theme-customization-configmap.yaml
      - description: "Create the theme customization bundle"
        cmd: uds create bundles/theme-customizations --confirm --no-progress
      - description: "Remove the existing package to enforce Keycloak Realm reinit (ignores errors if it doesn't exist)"
        cmd: |
          uds zarf package remove core-identity-authorization --confirm || true
          uds zarf tools kubectl delete secret keycloak-admin-password -n keycloak --ignore-not-found
      - description: "Deploy the theme customization bundle"
        cmd: uds deploy bundles/theme-customizations/uds-bundle-theme-customization-tests-*.tar.zst --set=core-identity-authorization.KEYCLOAK_CONFIG_IMAGE=uds-core-config:keycloak --confirm --no-progress
      - description: "Recreate users"
        task: create-users
      - description: "Run the theme customization tests"
        cmd: |
          # Should already be done... but just in case
          npm --prefix src/test/cypress install
          npm --prefix src/test/cypress run cy.run:theme-customization

  - name: license
    actions:
      - description: Lint for the SPDX license identifier being in source files
        task: remote:license

  - name: fix-license
    actions:
      - description: Add the SPDX license identifier to source files
        task: remote:fix-license

  # Note that due to cloning the docs repo (which is private) this task will require organization access to the repo
  # This task does not clone in/manage docs outside of the identity repo so you may hit some 404s during development
  - name: dev-docs
    description: "Start the dev docs server"
    actions:
      - description: "Cleanup previous runs"
        cmd: |
          rm -rf uds-docs
      - description: "Clone the docs repo and symlink the reference docs"
        cmd: |
          git clone https://github.com/defenseunicorns/uds-docs.git uds-docs
          rm -rf uds-docs/src/content/docs/reference uds-docs/src/content/docs/.images
          # This only symlinks the reference and images folders since these are the only docs we use in the docs site
          ln -s $(pwd)/docs/reference uds-docs/src/content/docs/reference
          ln -s $(pwd)/docs/.images uds-docs/src/content/docs/.images
      - description: "Start the docs server with npm (this will run until you stop it)"
        cmd: |
          # Actual startup takes up to a minute because of the npm install
          cd uds-docs && npm i && npm run dev
